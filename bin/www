#!/usr/bin/env node
/**
 * Module dependencies.
 * Зависимости модуля.
 */
var app = require('../app');
var debug = require('debug')('restoran:server');
var http = require('http');
var config = require("../config");
var log = require('libs/log')(module);

/**
 * Get port from environment and store in Express.
 * Получить порт из внешней среды и хранить в Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', config.get('port'));

/**
 * Create HTTP server.
 * Создание HTTP-сервера.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 * Слушает на предусмотренном порту, на всех сетевых интерфейсах.
 */
server.listen(config.get('port'));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 * Преобразует порт в число, строка или ложь.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 * Слушатель событий для HTTP сервера события "ошибка".
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    var bind = typeof port === 'string'
        ? 'Pipe ' + config.get('port')
        : 'Port ' + config.get('port');
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            log.error(bind + ' requires elevated privileges'); //console
            process.exit(1);
            break;
        case 'EADDRINUSE':
            log.error(bind + ' is already in use'); //console
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 * слушатель событий для HTTP-сервера "слушает" событие.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
